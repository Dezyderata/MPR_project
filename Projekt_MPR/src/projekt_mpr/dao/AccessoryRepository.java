package projekt_mpr.dao;

import java.sql.*;
import java.util.ArrayList;

import projekt_mpr.domain.Accessory;


public class AccessoryRepository extends RepositoryBase<Accessory>{
	
	public AccessoryRepository(){
		super();
	}
	
	@Override
	public String createTableSql() {
		return "CREATE TABLE accessories("
				+ "id INT GENERATED BY DEFAULT AS IDENTITY,"
				+ "name VARCHAR(20),"
				+ "price FLOAT(6,2)"
				+ ")";
	}
	@Override
	public String insertSql() {
		return "INSERT INTO accessories(name,price) VALUES (?,?)";
	}
	@Override
	public String updateSql() {
		return "UPDATE accessories SET (name, price) = (?,?) WHERE id=?";
	}
	@Override
	public String deleteSql() {
		return "DELETE FROM accessories WHERE id=?";
	}
	@Override
	public String selectAllSql() {
		return "SELECT * FROM accessories";
	}
	@Override
	public String tableName() {
		return "accessories";
	}
	public ArrayList<Accessory> getAll(){
		ArrayList<Accessory> result = new ArrayList<Accessory>();
		try {
			ResultSet rs = selectAll.executeQuery();
			while(rs.next()){
				Accessory p = new Accessory();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setPrice(rs.getFloat("price"));
				result.add(p);
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	@Override
	protected void parametrizeUpdateStatement(PreparedStatement statement, Accessory accessory) throws SQLException {
		statement.setString(1, accessory.getName());
		statement.setFloat(2, accessory.getPrice());
		statement.setInt(3, accessory.getId());
		
	}

	@Override
	protected void parametrizeInsertStatement(PreparedStatement statement, Accessory accessory) throws SQLException {
		statement.setString(1, accessory.getName());
		statement.setFloat(2, accessory.getPrice());
		
	}
}
