package projekt_mpr.dao;

import java.sql.*;
import java.util.ArrayList;

import projekt_mpr.domain.Accessory;


public class AccessoryRepository {
	Connection connection;
	
	private String createTableSql = "CREATE TABLE accessories("
			+ "id INT GENERATED BY DEFAULT AS IDENTITY,"
			+ "name VARCHAR(20),"
			+ "price FLOAT(6,2)"
			+ ")";
	
	private String insertSql = "INSERT INTO accessories(name,price) VALUES (?,?)";
	private String updateSql = "UPDATE accessories SET (name, price) = (?,?) WHERE id=?";
	private String deleteSql = "DELETE FROM accessories WHERE id=?";
	private String selectAllSql = "SELECT * FROM accessories";
	
	private Statement createTable;
	private PreparedStatement insert;
	private PreparedStatement selectAll;
	private PreparedStatement update;
	private PreparedStatement delete;
	
	public AccessoryRepository(){
		
		try {
			connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
			createTable = connection.createStatement();
			insert = connection.prepareStatement(insertSql);
			update = connection.prepareStatement(updateSql);
			delete = connection.prepareStatement(deleteSql);
			selectAll = connection.prepareStatement(selectAllSql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public ArrayList<Accessory> getAll(){
		ArrayList<Accessory> result = new ArrayList<Accessory>();
		try {
			ResultSet rs = selectAll.executeQuery();
			while(rs.next()){
				Accessory p = new Accessory();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setPrice(rs.getFloat("price"));
				result.add(p);
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public void insert(Accessory accessory){
		try{
			insert.setString(1, accessory.getName());
			insert.setFloat(2, accessory.getPrice());
			insert.executeUpdate();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}
	
	public void update(Accessory accessory) {

		try{
			update.setString(1, accessory.getName());
			update.setFloat(2, accessory.getPrice());
			update.setInt(3, accessory.getId());
			update.executeUpdate();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}
	
	public void delete(Accessory accessory) {

		try{
			delete.setInt(1, accessory.getId());
			delete.executeUpdate();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}
	
	public void createTable(){
		try {
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while(rs.next()){
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("accessories")){
					tableExists=true;
					break;
				}
			}
			if(!tableExists)
				createTable.executeUpdate(createTableSql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
