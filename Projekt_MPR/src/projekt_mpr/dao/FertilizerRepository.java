package projekt_mpr.dao;

import java.sql.*;
import java.util.ArrayList;

import projekt_mpr.domain.Fertilizer;

public class FertilizerRepository {

	Connection connection;
	private String createTalbeSql = "CREATE TABLE fertilizers("
			+ "id INT GENERATED BY DEFAULT AS IDENTITY, "
			+ "name VARCHAR(20), "
			+ "manufacturer VARCHAR(30), "
			+ "price FLOAT(6,2)"
			+ ")";
	private String insertSql = "INSERT INTO fertilizers(name, manufacturer, price) VALUES (?,?,?)";
	private String updateSql = "UPDATE fertilizers SET (name, manufacturer, price) =(?,?,?) WHERE id=?";
	private String deleteSql = "DELETE FROM fertilizers WHERE id =?";
	private String selectAllSql = "SELECT * FROM fertilizers";	
	private Statement createTable;
	private PreparedStatement insert;
	private PreparedStatement update;
	private PreparedStatement delete;
	private PreparedStatement selectAll;
	
	public FertilizerRepository() {
		try {
			connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
			createTable = connection.createStatement();
			insert = connection.prepareStatement(insertSql);
			update = connection.prepareStatement(updateSql);
			delete = connection.prepareStatement(deleteSql);
			selectAll = connection.prepareStatement(selectAllSql);
		} catch (SQLException e) {
			System.err.println("Something went wrong during connecting fertilizers");
			e.printStackTrace();
		}
	}
	public ArrayList<Fertilizer> selectAll(){
		ArrayList<Fertilizer> result = new ArrayList<Fertilizer>();
		try {
			ResultSet rs = selectAll.executeQuery();
			while(rs.next()) {
				Fertilizer f = new Fertilizer();
				f.setId(rs.getInt("id"));
				f.setName(rs.getString("name"));
				f.setManufacturer(rs.getString("manufacturer"));
				f.setPrice(rs.getFloat("price"));
				result.add(f);
			}
		} catch (SQLException e) {
			System.err.println("something went wrong during select all from fertilizers");
			e.printStackTrace();
		}
		return result;
	}
	public void delete(Fertilizer fertilizer) {
		try {
			delete.setInt(1, fertilizer.getId());
			delete.executeUpdate();
		} catch (SQLException e) {
			System.err.println("Something went wrong during deleting fertilizer");
			e.printStackTrace();
		}
	}
	public void update(Fertilizer fertilizer) {
		try {
			update.setString(1, fertilizer.getName());
			update.setString(2, fertilizer.getManufacturer());
			update.setFloat(3, fertilizer.getPrice());
			update.setInt(4, fertilizer.getId());
			update.executeUpdate();
		} catch (SQLException e) {
			System.err.println("Something went wrong during updating fertilizer");
			e.printStackTrace();
		}
		
	}
	public void insert(Fertilizer fertilizer) {
		try {
			insert.setString(1, fertilizer.getName());
			insert.setString(2, fertilizer.getManufacturer());
			insert.setFloat(3, fertilizer.getPrice());
			insert.executeUpdate();
		} catch (SQLException e) {
			System.err.println("Something went wrong during insert into fertilizers");
			e.printStackTrace();
		}
	}
	public void createTable() {
		boolean tableExist = false;
		try {
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			while(rs.next()) {
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("fertilizers")) {
					tableExist = true;
					break;
				}
			}
			if(!tableExist) {
				createTable.executeUpdate(createTalbeSql);
			}
		} catch (SQLException e) {
			System.err.println("Something went wrong during creating fertilizer table");
			e.printStackTrace();
		}
	}
}
